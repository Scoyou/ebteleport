#!/usr/bin/env ruby
# frozen_string_literal: true

def env_selection(mapping)
  env_prompt = TTY::Prompt.new
  env_prompt.select('Select Environment') do |env_menu|
    vim_key_bindings(env_prompt)

    env_menu.choice 'Production', -> { show_env_instances(mapping, 'production') }
    env_menu.choice 'Staging', -> { show_env_instances(mapping, 'staging') }
    env_menu.choice 'Exit', -> { exit }
  end
end

def vim_key_bindings(prompt)
  prompt.on(:keypress) do |event|
    prompt.trigger(:keydown) if event.value == 'j'
    prompt.trigger(:keyup) if event.value == 'k'
    prompt.trigger(:keyleft) if event.value == 'h'
    prompt.trigger(:keyright) if event.value == 'l'
  end
end

def open_in_browser(url)
  Launchy.open(url)
end

def execute_ssh(bitnami_ip, instance)
  name = instance[:name]
  ipaddr = instance[:ipaddr]
  puts "\n\n~~~ sshing you into #{name} at #{ipaddr} ~~~"
  puts "use 'echo -en \"\\e[?25h\"' to unhide cursor\n\n"

  bitnami_ssh = "ssh -i ~/.ssh/Bridge_Data_Migration.pem -t bitnami@#{bitnami_ip} "
  instance_ssh = "\"ssh -i .ssh/Bridge_Data_Migration.pem -t ec2-user@#{ipaddr}\""

  system "echo 'echo -en \"\\e[?25h\"' | pbcopy"
  puts 'copied cursor command to clipboard'
  command = bitnami_ssh + instance_ssh
  exec(command)
end

def show_env_instances(mapping, environment)
  prompt = TTY::Prompt.new

  bitnami_ip = environment == 'production' ? '3.139.81.57' : '52.15.231.12'

  prompt.select('Select Instance', per_page: 10) do |menu|
    vim_key_bindings(prompt)

    menu.choice 'Back', -> { env_selection(mapping) }
    mapping
      .flatten
      .sort_by { |m| m[:name] }.select { |m| m[:environment] == environment }
      .each do |item|
        if item[:ipaddr].nil?
          menu.choice name: item[:name].to_s, disabled: '(Environment unavailable)'
        else
          menu.choice "#{item[:name]} - #{item[:ipaddr]}", -> { sub_menu(mapping, environment, bitnami_ip, item) }
        end
      end
    menu.choice 'Exit', -> { exit }
  end
end

def sub_menu(mapping, env, bitnami_ip, item)
  prompt = TTY::Prompt.new

  prompt.select('Make a selection') do |menu|
    vim_key_bindings(prompt)

    if item[:url].nil?
      menu.choice name: 'Dashboard (opens in browser)', disabled: '(URL not available for environment)'
    else
      menu.choice 'Dashboard (opens in browser)', lambda {
        open_in_browser(item[:url])
        sub_menu(mapping, env, bitnami_ip, item)
      }
    end
    menu.choice 'Open SSH Connection', -> { execute_ssh(bitnami_ip, item) }
    menu.choice 'Back', -> { show_env_instances(mapping, env) }
    menu.choice 'Exit', -> { exit }
  end
end

def installing_missing_gems
  yield
rescue LoadError => e
  gem_name = e.message.split('--').last.strip
  install_command = "gem install #{gem_name}"

  # install missing gem
  puts "Probably missing gem: #{gem_name}"
  print 'Auto-install it? [yN] '
  gets.strip =~ /y/i or exit(1)
  system(install_command) or exit(1)

  # retry
  Gem.clear_paths
  puts 'Trying again ...'
  require gem_name
  retry
end

installing_missing_gems do
  require 'tty-prompt'
  require 'json'
  require 'launchy'
end

def instance_results
  `aws-vault exec bridge-custom-dev -- aws ec2 describe-instances`
end

mapping = JSON(instance_results)['Reservations'].map do |reservation|
  reservation['Instances'].map do |instance|
    name = instance['Tags'].select { |tag| tag['Key'] == 'Name' }.first['Value']
    env_id = unless instance['Tags'].select { |tag| tag['Key'] == 'elasticbeanstalk:environment-id' }.empty?
               instance['Tags'].select { |tag| tag['Key'] == 'elasticbeanstalk:environment-id' }.first['Value']
             end
    environment = name[/Staging/] ? 'staging' : 'production'
    ip_addr = instance['PrivateIpAddress']
    url = if env_id
            base = 'https://us-east-2.console.aws.amazon.com/elasticbeanstalk/home'
            params = "region=us-east-2#/environment/dashboard?applicationName=#{name}&environmentId=#{env_id}"
            "#{base}?#{params}"
          end
    {
      environment: environment,
      name: name,
      ipaddr: ip_addr,
      url: url || nil
    }
  end
end

if ARGV[0]
  begin
    ENVIRONMENTS = %w[prod staging].freeze
    env = ARGV[0].split('-').last.downcase

    unless ENVIRONMENTS.include? env
      puts 'Please specify an environment'
      exit
    end

    bitnami_ip = env == 'prod' ? '3.139.81.57' : '52.15.231.12'
    instance = mapping.flatten.select { |m| m[:name].downcase == ARGV[0].downcase && m[:ipaddr] }.first

    execute_ssh(bitnami_ip, instance)
  rescue StandardError => e
    puts e
  end
else
  env_selection(mapping)
end
